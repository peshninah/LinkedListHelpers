
// C# program to delete a given  
// node in linked list under  
// given constraints
using System.Globalization;
using System;

using System.Collections;

public class LinkedList
{

    Node head;

    class Node
    {

        public string data;
        public Node next;

        public Node(string d)
        {
            data = d;
            next = null;
        }
    }

    void deleteNode(Node node, Node n)
    {

        // When node to be deleted is head node 
        if (node == n)
        {
            if (node.next == null)
            {
                Console.WriteLine("There is only one node. The list "
                                + "can't be made empty ");
                return;
            }

            /* Copy the data of next node to head */
            node.data = node.next.data;

            // store address of next node 
            n = node.next;

            // Remove the link of next node 
            node.next = node.next.next;

            // free memory 
            GC.Collect();

            return;
        }

        // When not first node, follow 
        // the normal deletion process 
        // find the previous node 
        Node prev = node;
        while (prev.next != null && prev.next != n)
        {
            prev = prev.next;
        }

        // Check if node really exists in Linked List 
        if (prev.next == null)
        {
            Console.WriteLine("Given node is not" +
                               "present in Linked List");
            return;
        }

        // Remove node from Linked List 
        prev.next = prev.next.next;

        // Free memory 
        GC.Collect();

        return;
    }

    /* Utility function to print a linked list */
    void printList(Node head)
    {
        while (head != null)
        {
            Console.Write(head.data + " ");
            head = head.next;
        }
        Console.WriteLine("");
    }

    // Driver code 
    public static void Main(String[] args)
    {
        LinkedList list = new LinkedList();
        list.head = new Node("E");
        list.head.next = new Node("B");
        list.head.next.next = new Node("E");
        list.head.next.next.next = new Node("E");
        list.head.next.next.next.next = new Node("B");
        list.head.next.next.next.next.next = new Node("A");
        list.head.next.next.next.next.next.next = new Node("B");
       

        Console.WriteLine("Given Linked List :");
        list.printList(list.head);
        Console.WriteLine("");

        // Let us delete the node with value 10 
        Console.WriteLine("Deleting node :" +
                            list.head.next.next.data);
        list.deleteNode(list.head, list.head.next.next);

        Console.WriteLine("Modified Linked list :");
        list.printList(list.head);
        Console.WriteLine("");

        // Lets delete the first node 
        //Console.WriteLine("Deleting first Node");
        list.deleteNode(list.head, list.head);
        //list.Reverse(list.head, list.head.next.data);
        /* reverse the last 2 elements.
        /*Console.WriteLine("Modified Linked List");
        list.printList(list.head);*/
    }
}


